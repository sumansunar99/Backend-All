import {
  Body,
  Controller,
  HttpCode,
  HttpStatus,
  Post,
} from '@nestjs/common';
import {
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { Create{{pascalCase name}}Response } from './create-{{dashCase name}}-response';
import { Create{{pascalCase name}}Request } from './create-{{dashCase name}}-request';
import { ErrorResponseModel } from 'src/api/api.exception';
import { PrismaService } from 'src/prisma.service';

@ApiTags('{{pascalCase moduleName}}')
@Controller('{{dashCase moduleName}}/{{dashCase controllerName}}')
export class Create{{pascalCase name}}Controller {
  constructor(private readonly prismaService: PrismaService) {}

  @Post()
  @ApiResponse({status: HttpStatus.OK,description: '',type: Create{{pascalCase name}}Response,})
  @ApiResponse({status: HttpStatus.NOT_FOUND,description: '',type: ErrorResponseModel,})
  @ApiOperation({ operationId: 'create{{pascalCase name}}' })
  @HttpCode(201)
  async execute(
    @Body() request: Create{{pascalCase name}}Request,
  ): Promise<Create{{pascalCase name}}Response> {
    const result = await this.prismaService.{{camelCase name}}.create({
      data: {
        {{#each fields}}
            {{#unless (eq this.name "id")}}
              {{#if (or (eq this.type "String") (eq this.type "String?") (eq this.type "Boolean") (eq this.type "Boolean?") (eq this.type "Int") (eq this.type "Int?"))}}
              {{this.name}}: request.{{this.name}},
              {{/if}}
            {{/unless}}
          {{/each}}
      },
    });
    return {
      id: result.id,
    };
  }
}
