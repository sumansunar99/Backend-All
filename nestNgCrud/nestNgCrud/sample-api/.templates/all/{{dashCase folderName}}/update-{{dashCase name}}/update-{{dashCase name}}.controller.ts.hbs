import {
  Body,
  Controller,
  HttpCode,
  HttpStatus,
  Param,
  Put,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import {Update{{pascalCase name}}Request } from './update-{{dashCase name}}-request';
import { PrismaService } from 'src/prisma.service';

@ApiTags('{{pascalCase moduleName}}')
@Controller('{{dashCase moduleName}}/{{dashCase controllerName}}')
export class Update{{pascalCase name}}Controller {
  constructor(private readonly prismaService: PrismaService) {}

  @Put(':id')
  @ApiResponse({
    status: HttpStatus.NO_CONTENT,
  })
  @ApiOperation({ operationId: 'update{{pascalCase name}}' })
  @HttpCode(204)
  async execute(
    @Param('id') id: string,
    @Body() request:Update{{pascalCase name}}Request,
  ): Promise<void> {
    await this.prismaService.{{camelCase name}}.update({
      where: {
        id: id,
      },
      data: {
        {{#each fields}}
            {{#unless (eq this.name "id")}}
              {{#if (or (eq this.type "String") (eq this.type "String?") (eq this.type "Boolean") (eq this.type "Boolean?") (eq this.type "Int") (eq this.type "Int?"))}}
              {{this.name}}: request.{{this.name}},
              {{/if}}
            {{/unless}}
          {{/each}}
      },
    });
  }
}
