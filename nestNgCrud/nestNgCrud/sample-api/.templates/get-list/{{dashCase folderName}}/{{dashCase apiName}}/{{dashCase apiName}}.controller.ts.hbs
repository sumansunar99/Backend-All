import {
  Controller,
  Get,
  HttpCode,
  HttpStatus,
  Query,
} from '@nestjs/common';
import {
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { {{pascalCase apiName}}Response } from './{{dashCase apiName}}-response';
import { ErrorResponseModel } from 'src/api/api.exception';
import { PrismaService } from '@src/prisma.service';
import { {{pascalCase apiName}}Request } from './{{dashCase apiName}}-request';

@ApiTags('{{pascalCase moduleName}}')
@Controller('{{dashCase moduleName}}/{{dashCase controllerName}}')
export class {{pascalCase apiName}}Controller {
  constructor(private readonly prismaService: PrismaService) {}

  @Get()
  @ApiResponse({status: HttpStatus.OK,description: 'List of {{pascalCase name}}',type: [{{pascalCase apiName}}Response],})
  @ApiResponse({status: HttpStatus.NOT_FOUND,description: 'No {{pascalCase name}} found',type: ErrorResponseModel,})
  @ApiOperation({ operationId: '{{camelCase apiName}}' })
  @HttpCode(200)
  async execute(@Query() request: {{pascalCase apiName}}Request,): Promise<{{pascalCase apiName}}Response> {
  const whereCondition = {
  OR: [
    {{#each fields}}
    {{#if (or (eq this.type "String") (eq this.type "String?"))}}
    { {{this.name}}: { contains: request.search || '' } },
    {{/if}}
    {{/each}}
  ],
};

let orderByCondition: any = {};

switch (request.orderByPropertyName) {
  {{#each fields}}
  {{#if (or (eq this.type "String") (eq this.type "String?") (eq this.type "Int") (eq this.type "Int?") (eq this.type "Boolean") (eq this.type "Boolean?"))}}
  case '{{this.name}}':
    orderByCondition = {
      {{this.name}}: request.sortingDirection,
    };
    break;
  {{/if}}
  {{/each}}

  default:
    orderByCondition = {
      updatedOn: 'DESC', // Replace 'updatedOn' with your default sort field
    };
    break;
}

const result = await this.prismaService.$transaction([
  this.prismaService.{{camelCase name}}.count({
    skip: request.pageNumber * request.pageSize - request.pageSize,
    take: request.pageSize,
    where: whereCondition,
  }),

  this.prismaService.{{camelCase name}}.findMany({
    skip: request.pageNumber * request.pageSize - request.pageSize,
    take: request.pageSize,
    where: whereCondition,
    orderBy: orderByCondition,
  }),
]);

const response = {
  orderByPropertyName: request.orderByPropertyName,
  sortingDirection: request.sortingDirection,
  pageNumber: request.pageNumber,
  pageSize: request.pageSize,
  totalCount: result[0],
  items: result[1].map((x) => {
  return {
    {{#each fields}}
    {{#if (or (eq this.type "String") (eq this.type "String?")  (eq this.type "Boolean?")  (eq this.type "Boolean?")  (eq this.type "Int?")  (eq this.type "Int?"))}}
    {{this.name}}: x.{{this.name}},
    {{/if}}
    {{/each}}
  };
}),

};
return response;

  }
}
